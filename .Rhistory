test2<-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Longitudinal.treat1")]))<=as.numeric(as.character(longpooled$upper.random))
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
jointoutput$coverage.Longitudinal.pooled[i]<-test3
jointoutput$bias.Longitudinal.pooled[i]<-longpooled$TE.random-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Longitudinal.treat1")]))
}
#####################################
### extract the results from the separate model
#####################################
### longitudinal separate
estimatecolumns<-grep("Estimate",names(sepoutput))
Longcolumns<-grep("Longitudinal",names(sepoutput))
longpooledcols<-grep("pooled",names(sepoutput))
longestcols<-intersect(estimatecolumns,Longcolumns)
longestcols<-setdiff(longestcols,longpooledcols)
seplongfit<-modelfit$sepests$longests$modelfit
if(group %in% c(1,4)){
seplongests<-c(fixef(seplongfit)[1:3],fixef(seplongfit)[3]+fixef(seplongfit)[grep(":",names(fixef(seplongfit)))])
sepoutput[i,longestcols]<-seplongests
x_long<-c(fixef(seplongfit)[3],fixef(seplongfit)[grep(":",names(fixef(seplongfit)))])
#x2<-c(x[1],x[1]+x[2:length(x)])
v_long<-vcov(seplongfit)[(rownames(vcov(seplongfit))%in%names(x_long)),(colnames(vcov(seplongfit))%in%names(x_long))]
standarderrors_long<-unlist(lapply(1:length(grep(":",names(fixef(seplongfit)))),function(u){
xsubset<-x_long[c(1,u)]
vsubset<-v_long[c(1,u),c(1,u)]
deltamethod(~x1+x2, mean=xsubset, cov=vsubset)
}))
standarderrors_long<-c(sqrt(diag(vcov(seplongfit)[(rownames(vcov(seplongfit))%in%names(seplongests)[1:3]),(colnames(vcov(seplongfit))%in%names(seplongests)[1:3])])),standarderrors_long)
confidenceints_long<-cbind(c(seplongests+qnorm(0.025)*standarderrors_long),c(seplongests-qnorm(0.025)*standarderrors_long))
test1<-confidenceints_long[,1]<=as.numeric(truevaluestemp[grep("Longitudinal",names(truevaluestemp))])
test2<-as.numeric(truevaluestemp[grep("Longitudinal",names(truevaluestemp))])<=confidenceints_long[,2]
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
covercols<-grep("coverage",names(sepoutput))
longcovercols<-intersect(covercols,Longcolumns)
longcovercols<-setdiff(longcovercols,longpooledcols)
sepoutput[i,longcovercols]<-test3
biascols<-grep("bias",names(sepoutput))
longbiascols<-intersect(biascols,Longcolumns)
longbiascols<-setdiff(longbiascols,longpooledcols)
sepoutput[i,longbiascols]<-seplongests-as.numeric(truevaluestemp[grep("Longitudinal",names(truevaluestemp))])
#then calculate the pooled values
longpooled<-metagen(TE = seplongests[3:length(seplongests)],
seTE = standarderrors_long[3:length(standarderrors_long)])
sepoutput$Estimate.Longitudinal.pooled[i]<-longpooled$TE.random
test1<-as.numeric(as.character(longpooled$lower.random))<=as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Longitudinal.treat1")]))
test2<-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Longitudinal.treat1")]))<=as.numeric(as.character(longpooled$upper.random))
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
sepoutput$coverage.Longitudinal.pooled[i]<-test3
sepoutput$bias.Longitudinal.pooled[i]<-longpooled$TE.random-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Longitudinal.treat1")]))
} else {
seplongests<-fixef(seplongfit)[1:3]
sepoutput[i,longestcols]<-seplongests
confidenceints_long<-confint(seplongfit,method="Wald")[rownames(confint(seplongfit,method="Wald"))%in%names(fixef(seplongfit)[1:3]),]
test1<-confidenceints_long[,1]<=as.numeric(truevaluestemp[grep("Longitudinal",names(truevaluestemp))])
test2<-as.numeric(truevaluestemp[grep("Longitudinal",names(truevaluestemp))])<=confidenceints_long[,2]
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
covercols<-grep("coverage",names(sepoutput))
longcovercols<-intersect(covercols,Longcolumns)
#longcovercols<-setdiff(longcovercols,longpooledcols)
sepoutput[i,longcovercols]<-test3
biascols<-grep("bias",names(sepoutput))
longbiascols<-intersect(biascols,Longcolumns)
#longbiascols<-setdiff(longbiascols,longpooled)
sepoutput[i,longbiascols]<-seplongests-as.numeric(truevaluestemp[grep("Longitudinal",names(truevaluestemp))])
}
#####################################
### survival results
estimatecolumns<-grep("Estimate",names(sepoutput))
survcolumns<-grep("Survival",names(sepoutput))
survpooledcols<-grep("pooled",names(sepoutput))
survestcols<-intersect(estimatecolumns,survcolumns)
survestcols<-setdiff(survestcols,survpooledcols)
sepsurvfit<-modelfit$sepests$survests$modelfit
if(group == 1){
sepsurvests<-c(coefficients(sepsurvfit)[1],coefficients(sepsurvfit)[1]+coefficients(sepsurvfit)[grep(":",names(coefficients(sepsurvfit)))])
sepoutput[i,survestcols]<-sepsurvests
x_surv<-c(coefficients(sepsurvfit)[1],coefficients(sepsurvfit)[grep(":",names(coefficients(sepsurvfit)))])
#x2<-c(x[1],x[1]+x[2:length(x)])
v_surv<-vcov(sepsurvfit)[(rownames(vcov(sepsurvfit))%in%names(x_surv)),(colnames(vcov(sepsurvfit))%in%names(x_surv))]
standarderrors_surv<-unlist(lapply(1:length(grep(":",names(coefficients(sepsurvfit)))),function(u){
xsubset<-x_surv[c(1,u)]
vsubset<-v_surv[c(1,u),c(1,u)]
deltamethod(~x1+x2, mean=xsubset, cov=vsubset)
}))
standarderrors_surv<-c(sqrt(vcov(sepsurvfit)[1,1]),standarderrors_surv)
confidenceints_surv<-cbind(c(sepsurvests+qnorm(0.025)*standarderrors_surv),c(sepsurvests-qnorm(0.025)*standarderrors_surv))
test1<-confidenceints_surv[,1]<=as.numeric(truevaluestemp[grep("Survival",names(truevaluestemp))])
test2<-as.numeric(truevaluestemp[grep("Survival",names(truevaluestemp))])<=confidenceints_surv[,2]
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
covercols<-grep("coverage",names(sepoutput))
survcovercols<-intersect(covercols,survcolumns)
survcovercols<-setdiff(survcovercols,survpooledcols)
sepoutput[i,survcovercols]<-test3
biascols<-grep("bias",names(sepoutput))
survbiascols<-intersect(biascols,survcolumns)
survbiascols<-setdiff(survbiascols,survpooledcols)
sepoutput[i,survbiascols]<-sepsurvests-as.numeric(truevaluestemp[grep("Survival",names(truevaluestemp))])
#then calculate the pooled values
survpooled<-metagen(TE = sepsurvests,
seTE = standarderrors_surv)
sepoutput$Estimate.Survival.pooled[i]<-survpooled$TE.random
test1<-as.numeric(as.character(survpooled$lower.random))<=as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Survival.treat1")]))
test2<-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Survival.treat1")]))<=as.numeric(as.character(survpooled$upper.random))
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
sepoutput$coverage.Survival.pooled[i]<-test3
sepoutput$bias.Survival.pooled[i]<-survpooled$TE.random-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Survival.treat1")]))
} else {
sepsurvests<-coefficients(sepsurvfit)[1]
sepoutput[i,survestcols]<-sepsurvests
confidenceints_surv<-confint(sepsurvfit,method="Wald")[rownames(confint(sepsurvfit,method="Wald"))%in%names(coefficients(sepsurvfit)[1]),]
test1<-confidenceints_surv[1]<=as.numeric(truevaluestemp[grep("Survival",names(truevaluestemp))])
test2<-as.numeric(truevaluestemp[grep("Survival",names(truevaluestemp))])<=confidenceints_surv[2]
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
covercols<-grep("coverage",names(sepoutput))
survcovercols<-intersect(covercols,survcolumns)
#survcovercols<-setdiff(survcovercols,survpooledcols)
sepoutput[i,survcovercols]<-test3
biascols<-grep("bias",names(sepoutput))
survbiascols<-intersect(biascols,survcolumns)
#survbiascols<-setdiff(survbiascols,survpooled)
sepoutput[i,survbiascols]<-sepsurvests-as.numeric(truevaluestemp[grep("Survival",names(truevaluestemp))])
}
} else {
jointoutput[i,]<-rep("Error in fit",ncol(jointoutput))
sepoutput[i,]<-rep("Error in fit",ncol(sepoutput))
}
#####################################
### update progress bar
setTxtProgressBar(pb, i)
}
library(survival)
library(lme4)
library(statmod)
library(MASS)
library(gtools)
library(joineR)
library(joineRmeta)
library(meta)
library(msm)
#for true values use the true values dataset
load("C:/Users/mesudell/Desktop/R code/truevalues.dat")
str(truevalues)
#not interest in variance estimates but are intersted in convergence
infoextraction<-function(scenario, group){
tempname<-paste("simgroup",scenario,"group",group,sep="")
if(grepl("1_",scenario)){
truevaluestemp<-truevalues$simgroup1_[[tempname]]
} else if(grepl("2_",scenario)){
truevaluestemp<-truevalues$simgroup2_[[tempname]]
} else if(grepl("4_",scenario)){
truevaluestemp<-truevalues$simgroup4_[[tempname]]
}
setwd(paste("G:/onestagesim",scenario,"_group",group,"_.dat",sep=""))
listmodelfitsSEs<-list()
if(group == 1){
jointoutput <- as.data.frame(matrix(data=NA,nrow=0,ncol=((3*length(truevaluestemp))+7)))
colnames(jointoutput)<-c(paste(rep(c("Estimate","coverage","bias"),each=length(truevaluestemp)),rep(names(truevaluestemp),times=3),sep="."),
"convergence","Estimate.Longitudinal.pooled","coverage.Longitudinal.pooled","bias.Longitudinal.pooled",
"Estimate.Survival.pooled","coverage.Survival.pooled","bias.Survival.pooled")
sepoutput<-jointoutput[,!grepl("Association",names(jointoutput))]
sepoutput<-sepoutput[,!grepl("convergence",names(sepoutput))]
} else if (group == 4){
jointoutput <- as.data.frame(matrix(data=NA,nrow=0,ncol=((3*length(truevaluestemp))+4)))
colnames(jointoutput)<-c(paste(rep(c("Estimate","coverage","bias"),each=length(truevaluestemp)),rep(names(truevaluestemp),times=3),sep="."),
"convergence","Estimate.Longitudinal.pooled","coverage.Longitudinal.pooled","bias.Longitudinal.pooled")
sepoutput<-jointoutput[,! grepl("Association",names(jointoutput))]
sepoutput<-sepoutput[,! grepl("convergence",names(sepoutput))]
} else{
jointoutput <- as.data.frame(matrix(data=NA,nrow=0,ncol=((3*length(truevaluestemp))+1)))
colnames(jointoutput)<-c(paste(rep(c("Estimate","coverage","bias"),each=length(truevaluestemp)),rep(names(truevaluestemp),times=3),sep="."),
"convergence")
sepoutput<-jointoutput[,! grepl("Association",names(jointoutput))]
sepoutput<-sepoutput[,! grepl("convergence",names(sepoutput))]
}
Component<-NA
Parameter<-NA
pb <- txtProgressBar(min = 0, max = 1000, style = 3)
for(i in 1:1000){
#print(i)
load(paste("G:/onestagesim",scenario,"_group",group,"_.dat/onestagesim",scenario,"_group",group,"_",i-1,".dat",sep=""))
if(class(modelfit) == "jointmeta1"){
if(i == 1){
Component<-as.character(modelfitSE$results$Component)
Parameter<-as.character(modelfitSE$results$Parameter)
Parameter[which(Parameter == "(Intercept)")] <- "Intercept"
tempcomponent<-""
for(j in 1:length(Component)){
if(j == 1){
tempcomponent<-Component[j]
}else{
if(Component[j] != ""){
tempcomponent<-Component[j]
} else {
Component[j]<-tempcomponent
}
}
}
if(length(grep("Overall",Component))>0){
Component<-gsub(" Overall", "_Overall", Component)
}
tempname2<-paste(Component,Parameter,sep=".")
rowselector<-which(tempname2 %in% names(truevaluestemp))
}
#########################################
#extract the results from the joint model
jointoutput[i,1:length(truevaluestemp)]<-as.numeric(as.character(modelfitSE$results[rowselector,3]))
test1<-as.numeric(as.character(modelfitSE$results[rowselector,5]))<=truevaluestemp
test2<-truevaluestemp<=as.numeric(as.character(modelfitSE$results[rowselector,6]))
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
jointoutput[i,((length(truevaluestemp)+1):(2*length(truevaluestemp)))]<-test3
jointoutput[i,((2*length(truevaluestemp)+1):(3*length(truevaluestemp)))]<-as.numeric(as.character(modelfitSE$results[rowselector,3]))-as.numeric(truevaluestemp)
jointoutput$convergence[i]<-modelfit$convergence
if(group == 1){
longrowselector<-c(which(tempname2 == "Longitudinal.treat1"),intersect(grep("Overall",tempname2),grep("Longitudinal",tempname2)))
longpooled<-metagen(TE = as.numeric(as.character(modelfitSE$results[longrowselector,3])),
seTE = as.numeric(as.character(modelfitSE$results[longrowselector,4])))
jointoutput$Estimate.Longitudinal.pooled[i]<-longpooled$TE.random
test1<-as.numeric(as.character(longpooled$lower.random))<=as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Longitudinal.treat1")]))
test2<-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Longitudinal.treat1")]))<=as.numeric(as.character(longpooled$upper.random))
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
jointoutput$coverage.Longitudinal.pooled[i]<-test3
jointoutput$bias.Longitudinal.pooled[i]<-longpooled$TE.random-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Longitudinal.treat1")]))
survrowselector<-c(which(tempname2 == "Survival.treat1"),intersect(grep("Overall",tempname2),grep("Survival",tempname2)))
survpooled<-metagen(TE = as.numeric(as.character(modelfitSE$results[survrowselector,3])),
seTE = as.numeric(as.character(modelfitSE$results[survrowselector,4])))
jointoutput$Estimate.Survival.pooled[i]<-survpooled$TE.random
test1<-as.numeric(as.character(survpooled$lower.random))<=as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Survival.treat1")]))
test2<-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Survival.treat1")]))<=as.numeric(as.character(survpooled$upper.random))
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
jointoutput$coverage.Survival.pooled[i]<-test3
jointoutput$bias.Survival.pooled[i]<-survpooled$TE.random-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Survival.treat1")]))
} else if (group == 4){
longrowselector<-c(which(tempname2 == "Longitudinal.treat1"),intersect(grep("Overall",tempname2),grep("Longitudinal",tempname2)))
longpooled<-metagen(TE = as.numeric(as.character(modelfitSE$results[longrowselector,3])),
seTE = as.numeric(as.character(modelfitSE$results[longrowselector,4])))
jointoutput$Estimate.Longitudinal.pooled[i]<-longpooled$TE.random
test1<-as.numeric(as.character(longpooled$lower.random))<=as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Longitudinal.treat1")]))
test2<-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Longitudinal.treat1")]))<=as.numeric(as.character(longpooled$upper.random))
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
jointoutput$coverage.Longitudinal.pooled[i]<-test3
jointoutput$bias.Longitudinal.pooled[i]<-longpooled$TE.random-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Longitudinal.treat1")]))
}
#####################################
### extract the results from the separate model
#####################################
### longitudinal separate
estimatecolumns<-grep("Estimate",names(sepoutput))
Longcolumns<-grep("Longitudinal",names(sepoutput))
longpooledcols<-grep("pooled",names(sepoutput))
longestcols<-intersect(estimatecolumns,Longcolumns)
longestcols<-setdiff(longestcols,longpooledcols)
seplongfit<-modelfit$sepests$longests$modelfit
if(group %in% c(1,4)){
seplongests<-c(fixef(seplongfit)[1:3],fixef(seplongfit)[3]+fixef(seplongfit)[grep(":",names(fixef(seplongfit)))])
sepoutput[i,longestcols]<-seplongests
x_long<-c(fixef(seplongfit)[3],fixef(seplongfit)[grep(":",names(fixef(seplongfit)))])
#x2<-c(x[1],x[1]+x[2:length(x)])
v_long<-vcov(seplongfit)[(rownames(vcov(seplongfit))%in%names(x_long)),(colnames(vcov(seplongfit))%in%names(x_long))]
standarderrors_long<-unlist(lapply(1:length(grep(":",names(fixef(seplongfit)))),function(u){
xsubset<-x_long[c(1,u)]
vsubset<-v_long[c(1,u),c(1,u)]
deltamethod(~x1+x2, mean=xsubset, cov=vsubset)
}))
standarderrors_long<-c(sqrt(diag(vcov(seplongfit)[(rownames(vcov(seplongfit))%in%names(seplongests)[1:3]),(colnames(vcov(seplongfit))%in%names(seplongests)[1:3])])),standarderrors_long)
confidenceints_long<-cbind(c(seplongests+qnorm(0.025)*standarderrors_long),c(seplongests-qnorm(0.025)*standarderrors_long))
test1<-confidenceints_long[,1]<=as.numeric(truevaluestemp[grep("Longitudinal",names(truevaluestemp))])
test2<-as.numeric(truevaluestemp[grep("Longitudinal",names(truevaluestemp))])<=confidenceints_long[,2]
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
covercols<-grep("coverage",names(sepoutput))
longcovercols<-intersect(covercols,Longcolumns)
longcovercols<-setdiff(longcovercols,longpooledcols)
sepoutput[i,longcovercols]<-test3
biascols<-grep("bias",names(sepoutput))
longbiascols<-intersect(biascols,Longcolumns)
longbiascols<-setdiff(longbiascols,longpooledcols)
sepoutput[i,longbiascols]<-seplongests-as.numeric(truevaluestemp[grep("Longitudinal",names(truevaluestemp))])
#then calculate the pooled values
longpooled<-metagen(TE = seplongests[3:length(seplongests)],
seTE = standarderrors_long[3:length(standarderrors_long)])
sepoutput$Estimate.Longitudinal.pooled[i]<-longpooled$TE.random
test1<-as.numeric(as.character(longpooled$lower.random))<=as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Longitudinal.treat1")]))
test2<-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Longitudinal.treat1")]))<=as.numeric(as.character(longpooled$upper.random))
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
sepoutput$coverage.Longitudinal.pooled[i]<-test3
sepoutput$bias.Longitudinal.pooled[i]<-longpooled$TE.random-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Longitudinal.treat1")]))
} else {
seplongests<-fixef(seplongfit)[1:3]
sepoutput[i,longestcols]<-seplongests
confidenceints_long<-confint(seplongfit,method="Wald")[rownames(confint(seplongfit,method="Wald"))%in%names(fixef(seplongfit)[1:3]),]
test1<-confidenceints_long[,1]<=as.numeric(truevaluestemp[grep("Longitudinal",names(truevaluestemp))])
test2<-as.numeric(truevaluestemp[grep("Longitudinal",names(truevaluestemp))])<=confidenceints_long[,2]
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
covercols<-grep("coverage",names(sepoutput))
longcovercols<-intersect(covercols,Longcolumns)
#longcovercols<-setdiff(longcovercols,longpooledcols)
sepoutput[i,longcovercols]<-test3
biascols<-grep("bias",names(sepoutput))
longbiascols<-intersect(biascols,Longcolumns)
#longbiascols<-setdiff(longbiascols,longpooled)
sepoutput[i,longbiascols]<-seplongests-as.numeric(truevaluestemp[grep("Longitudinal",names(truevaluestemp))])
}
#####################################
### survival results
estimatecolumns<-grep("Estimate",names(sepoutput))
survcolumns<-grep("Survival",names(sepoutput))
survpooledcols<-grep("pooled",names(sepoutput))
survestcols<-intersect(estimatecolumns,survcolumns)
survestcols<-setdiff(survestcols,survpooledcols)
sepsurvfit<-modelfit$sepests$survests$modelfit
if(group == 1){
sepsurvests<-c(coefficients(sepsurvfit)[1],coefficients(sepsurvfit)[1]+coefficients(sepsurvfit)[grep(":",names(coefficients(sepsurvfit)))])
sepoutput[i,survestcols]<-sepsurvests
x_surv<-c(coefficients(sepsurvfit)[1],coefficients(sepsurvfit)[grep(":",names(coefficients(sepsurvfit)))])
#x2<-c(x[1],x[1]+x[2:length(x)])
v_surv<-vcov(sepsurvfit)[(rownames(vcov(sepsurvfit))%in%names(x_surv)),(colnames(vcov(sepsurvfit))%in%names(x_surv))]
standarderrors_surv<-unlist(lapply(1:length(grep(":",names(coefficients(sepsurvfit)))),function(u){
xsubset<-x_surv[c(1,u)]
vsubset<-v_surv[c(1,u),c(1,u)]
deltamethod(~x1+x2, mean=xsubset, cov=vsubset)
}))
standarderrors_surv<-c(sqrt(vcov(sepsurvfit)[1,1]),standarderrors_surv)
confidenceints_surv<-cbind(c(sepsurvests+qnorm(0.025)*standarderrors_surv),c(sepsurvests-qnorm(0.025)*standarderrors_surv))
test1<-confidenceints_surv[,1]<=as.numeric(truevaluestemp[grep("Survival",names(truevaluestemp))])
test2<-as.numeric(truevaluestemp[grep("Survival",names(truevaluestemp))])<=confidenceints_surv[,2]
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
covercols<-grep("coverage",names(sepoutput))
survcovercols<-intersect(covercols,survcolumns)
survcovercols<-setdiff(survcovercols,survpooledcols)
sepoutput[i,survcovercols]<-test3
biascols<-grep("bias",names(sepoutput))
survbiascols<-intersect(biascols,survcolumns)
survbiascols<-setdiff(survbiascols,survpooledcols)
sepoutput[i,survbiascols]<-sepsurvests-as.numeric(truevaluestemp[grep("Survival",names(truevaluestemp))])
#then calculate the pooled values
survpooled<-metagen(TE = sepsurvests,
seTE = standarderrors_surv)
sepoutput$Estimate.Survival.pooled[i]<-survpooled$TE.random
test1<-as.numeric(as.character(survpooled$lower.random))<=as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Survival.treat1")]))
test2<-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Survival.treat1")]))<=as.numeric(as.character(survpooled$upper.random))
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
sepoutput$coverage.Survival.pooled[i]<-test3
sepoutput$bias.Survival.pooled[i]<-survpooled$TE.random-as.numeric(as.character(truevaluestemp[which(names(truevaluestemp) %in% "Survival.treat1")]))
} else {
sepsurvests<-coefficients(sepsurvfit)[1]
sepoutput[i,survestcols]<-sepsurvests
confidenceints_surv<-confint(sepsurvfit,method="Wald")[rownames(confint(sepsurvfit,method="Wald"))%in%names(coefficients(sepsurvfit)[1]),]
test1<-confidenceints_surv[1]<=as.numeric(truevaluestemp[grep("Survival",names(truevaluestemp))])
test2<-as.numeric(truevaluestemp[grep("Survival",names(truevaluestemp))])<=confidenceints_surv[2]
test3<-rep(0,length(test2))
test3[Reduce("&",list(test1,test2))]<-1
covercols<-grep("coverage",names(sepoutput))
survcovercols<-intersect(covercols,survcolumns)
#survcovercols<-setdiff(survcovercols,survpooledcols)
sepoutput[i,survcovercols]<-test3
biascols<-grep("bias",names(sepoutput))
survbiascols<-intersect(biascols,survcolumns)
#survbiascols<-setdiff(survbiascols,survpooled)
sepoutput[i,survbiascols]<-sepsurvests-as.numeric(truevaluestemp[grep("Survival",names(truevaluestemp))])
}
} else {
jointoutput[i,]<-rep("Error in fit",ncol(jointoutput))
sepoutput[i,]<-rep("Error in fit",ncol(sepoutput))
}
#####################################
### update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
return(list(jointoutput=jointoutput,sepoutput=sepoutput))
}
# test<-infoextraction(scenario="1_1", group=1)
# test2<-infoextraction(scenario="1_1", group=4)
# test3<-infoextraction(scenario="1_1", group=3)
setwd("C:/Users/mesudell/Desktop/R code/onestagesimulationresults")
#########################
### results for 1_ ######
#########################
datsim1<-list()
for(i in 1:9){
datsim1[[i]]<-list()
names(datsim1)<-paste("datsim1_",i,sep="")
scenariotemp<-paste("1_",i,sep="")
for(j in 1:6){
print(paste("scenario=1_",i,", group=",j-1,sep=""))
tempresults<-infoextraction(scenario=scenariotemp,group=(j-1))
datsim1[[i]][[j]]<-tempresults
names(datsim1[[i]])[j]<-paste("datsim1_",i,"group",j-1,sep="")
}
}
devtools:::document()
install.packages("lme4")
library(joineRmeta)
library(joineRmeta)
install.packages("roxygen2")
install.packages("lme4","JM","ggplot2","gridExtra","gtools","joineR","meta","msm","statmod","nlme","survival","coxme")
install.packages(JM)
install.packages("JM")
install.packages("lme4")
install.packages("ggplot2")
install.packages("gridExtra")
install.packages("devtools")
install.packages("gtools")
install.packages("survival")
install.packages("coxme")
install.packages("joineR")
install.packages("joineRML")
install.packages("meta")
install.packages("metafor")
install.packages("msm")
install.packages("statmod")
library(joineRmeta)
update.packages("lme4")
library(joineRmeta)
library(joineRmeta)
use_build_ignore("cran-comments")
devtools::use_build_ignore("cran-comments")
devtools::check()
install.packages(knitr)
install.packages("knitr")
devtools::check()
devtools::check()
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
system('env')
getwd()
devtools::check()
devtools::check()
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
Sys.setenv(
PATH = paste(
Sys.getenv("PATH"),
C:\\Program Files\\qpdf-5.1.2-bin-mingw32\\qpdf-5.1.2\\bin
sep = ";"
)
)
Sys.setenv(
PATH = paste(
Sys.getenv("PATH"),
C:\\Program Files\\qpdf-5.1.2-bin-mingw32\\qpdf-5.1.2\\bin,
sep = ";"
)
)
Sys.setenv(
PATH = paste(
Sys.getenv("PATH"),
"C:\\Program Files\\qpdf-5.1.2-bin-mingw32\\qpdf-5.1.2\\bin",
sep = ";"
)
)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
installed.packages("rmarkdown")
install.packages("rmarkdown")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build_win()
devtools::use_travis()
devtools::check()
devtools::use_appveyor()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(joineRmeta)
devtools::check()
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:\\Program Files\\qpdf-5.1.2-bin-mingw32\\qpdf-5.1.2\\bin",sep=";"))
Sys.which(Sys.getenv("R_QPDF","qpdf"))
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build_win(version="R-release")
devtools::build_win(version="R-devel")
devtools::use_appveyor()
devtools::revdep_check()
devtools::revdep_check_summary()
devtools::revdep_check_save_summary()
devtools::revdep_check_print_problems()
devtools::use_build_ignore(NEWS)
devtools::use_build_ignore(NEWS.md)
devtools::check()
library(joineRmeta)
devtools::release()
install.packages("git2r")
install.packages("git2r")
devtools::release()
