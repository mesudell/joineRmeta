}
if(ncol(survdat) > 4){
p2 <- length(5:ncol(survdat))
}else{
p2<-0
}
rll2 <- rep(TRUE,nrow(survdat2))
for(i in 1:length(rll2)){
if(length(which(is.na(survdat2[i, ]))) > 0) {
rll2[i] <- FALSE
}
}
if(length(which(rll2 == FALSE)) > 0) {
missingids<-c(missingids, survdat2[!rll2, 1])
}
if(length(missingids) > 0) {
survdat<-survdat[!(survdat[, 1] %in% missingids), ]
survdat2<-survdat2[!(survdat[, 1] %in% missingids), ]
longdat2<-longdat2[!(longdat2[, 1] %in% missingids), ]
}
sorted <- sortDat(longdat, survdat, longdat2, survdat2)
longdat <- as.data.frame(sorted$long.s)
survdat <- as.data.frame(sorted$surv.s)
longdat2 <- as.data.frame(sorted$long.s2)
survdat2 <- as.data.frame(sorted$surv.s2)
if(is.null(long.rand.stud)){
ldaests <- longst(longdat = longdat,
long.formula.orig = long.formula,
long.rand.ind = long.rand.ind,
longdat2 = longdat2,
id.name = id.name,
study.name = study.name,
studies = studies)
}else{
ldaests <- longst(longdat = longdat,
long.formula.orig = long.formula,
long.rand.ind = long.rand.ind,
long.rand.stud = long.rand.stud,
longdat2 = longdat2,
id.name = id.name,
study.name = study.name,
studies = studies)
}
strat
survdat = survdat
survdat = survdat
surv.formula = surv.formula
survdat2 = survdat2
strat = strat
study.name = study.name
if(strat){
survests <- survst(survdat = survdat,
surv.formula = surv.formula,
survdat2 = survdat2,
strat = strat,
study.name = study.name)
}else{
survests <- survst(survdat = survdat,
surv.formula = surv.formula,
survdat2 = survdat2,
strat = strat,
study.name = study.name)
}
#' Function for survival starting values
#'
#' Internal function to estimate the starting values for the EM algorithm for
#'     the survival sub-model
#'
#' @param survdat2 the survival data ordered by increasing survival time
#' @inheritParams jointmeta1
#' @inheritParams EMalgRandprop
#'
#' @return A list of the results from the initial survival fit is returned.
#'     This list contains the following elements: \describe{
#'
#'     \item{\code{beta2}}{a vector of the estimated coefficients for fixed
#'     effects included in the survival sub-model. If there are no fixed effects
#'     included in the survival sub-model then this returns \code{NULL}}.
#'
#'     \item{\code{haz}}{the estimate of the baseline hazard estimated from the
#'     separate survival model.  If \code{strat = TRUE} then this is a list of
#'     length equal to the number of studies in the dataset, each element of
#'     which is a vector of length equal to the number of events in each study.
#'     If \code{strat = FALSE} then this is a vector of length equal to the
#'     number of events in the entire dataset.}
#'
#'     \item{\code{rs}}{the number of events that have occured by the individual
#'     in question's survival time.mate of the baseline hazard estimated from the
#'     separate survival model.  If \code{strat = TRUE} then this is a list of
#'     length equal to the number of studies in the dataset, each element of
#'     which is a vector of length equal to the number of individuals in each
#'     study. If \code{strat = FALSE} then this is a vector of length equal to
#'     the number of individuals in the entire dataset.}
#'
#'     \item{\code{sf}}{the survival times where at least one event was
#'     observed. If \code{strat = TRUE} then this is a list of
#'     length equal to the number of studies in the dataset, each element of
#'     which is a vector of length equal to the number of events in each study.
#'     If \code{strat = FALSE} then this is a vector of length equal to the
#'     number of events in the entire dataset.}
#'
#'     \item{\code{nev}}{the number of events that occur at each unique event
#'     time.  If \code{strat = TRUE} then this is a list of
#'     length equal to the number of studies in the dataset, each element of
#'     which is a vector of length equal to the number of events in each study.
#'     If \code{strat = FALSE} then this is a vector of length equal to the
#'     number of events in the entire dataset.}
#'
#'     \item{\code{log.like.surv}}{the value of the log-likelihood from the
#'     separate survival analysis}
#'
#'     }
#'
#'
#' @keywords internal
#' @import survival
survst <- function(survdat, surv.formula, survdat2, strat, study.name = NULL) {
survdat2 <- survdat2[order(survdat2[, 2]), ]
n <- length(survdat[, 2])
s <- survdat[, 2]
cen <- survdat[, 3]
study<-survdat[, 4]
ids.surv<-survdat[, 1]
p2 <- dim(survdat)[2] - 4
studies<-unique(study)
numstudies<-length(studies)
if(strat == FALSE) {
surv.start <- coxph(surv.formula, data = survdat, x = TRUE)
surv.start.f <- survfit(surv.start)
sf <- surv.start.f$time[surv.start.f$n.event != 0]
nf <- length(sf)
nev <- surv.start.f$n.event[surv.start.f$n.event != 0]
if (p2 > 0) {
haz <- coxph.detail(surv.start)$hazard
}else {
haz <- surv.start.f$n.event/surv.start.f$n.risk
haz <- haz[surv.start.f$n.event > 0]
}
rs <- rep(1:nf, c(diff(match(sf, s)), n + 1 - match(sf, s)[nf]))
if(cen[1] == 0) {
rs <- c(rep(0, which(cen == 1)[1]-1), rs)
}
names(rs) <- survdat[,1]
beta2 <- coef(surv.start)
ll <- surv.start$loglik - sum(cen)
list(beta2 = beta2, haz = haz, rs = rs, sf = sf, nev = nev,
log.like.surv = ll, modelfit = surv.start)
}else{
ids.bystudy <- lapply(1:numstudies, function(u) {
ids.surv[which(survdat[, 4] == studies[u])]
})
names(ids.bystudy) <- studies
n.bystudy <- unlist(lapply(1:numstudies, function(u) {
length(ids.bystudy[[u]])
}))
cen.bystudy <- lapply(1:numstudies, function(u) {
cen[which(ids.surv%in%ids.bystudy[[u]])]
})
names(cen.bystudy) <- studies
s.bystudy <- lapply(1:numstudies, function(u) {
s[which(ids.surv%in%ids.bystudy[[u]])]
})
names(s.bystudy) <- studies
surv.formula.strat <- as.character(surv.formula)
surv.formula.strat[3] <- paste(surv.formula.strat[3],
"+strata(", study.name, ")",
sep = "", collapse = "")
surv.formula.strat <- as.formula(paste(surv.formula.strat[2],
surv.formula.strat[1],
surv.formula.strat[3], sep = ""))
surv.start <- coxph(surv.formula.strat, data = survdat, x = TRUE)
surv.start.f <- survfit(surv.start)
data <- data.frame(cbind(basehaz(surv.start),
surv.start.f$n.event, surv.start.f$n.risk))
data.bystudy <- lapply(1:numstudies, function(u) {
data[which(data[, 3] == paste(study.name,"=",studies[u],sep="")), ]
})
names(data.bystudy) <- studies
sf.bystudy <- lapply(1:numstudies, function(u) {
data.bystudy[[u]][which(data.bystudy[[u]][, 4] != 0), 2]
})
names(sf.bystudy) <- studies
nf <- unlist(lapply(1:numstudies, function(u) {length(sf.bystudy[[u]])}))
nev.bystudy <- lapply(1:numstudies, function(u) {
data.bystudy[[u]][which(data.bystudy[[u]][, 4] != 0), 4]
})
names(nev.bystudy) <- studies
if (p2 > 0) {
haz <- lapply(1:numstudies, function(u) {
data.bystudy[[u]][which(data.bystudy[[u]][, 4] != 0), 1]
})
}else {
haz <- lapply(1:numstudies, function(u) {
datatemp <- data.bystudy[[u]]
temp <- datatemp[, 4]/datatemp[, 5]
temp[which(temp!=0)]
})
}
names(haz) <- studies
rs<-lapply(1:numstudies, function(u) {
eventslocs <- which(data.bystudy[[u]]$surv.start.f.n.event!=0)
eventcounter <- 0
loccounter <- 1
temp <- c()
for(i in 1:length(eventslocs)) {
temp <- c(temp,rep(eventcounter, data.bystudy[[u]]$surv.start.f.n.risk[
(loccounter)]-data.bystudy[[u]]$surv.start.f.n.risk[
(eventslocs[[i]])]))
eventcounter <- eventcounter + 1
loccounter <- eventslocs[i]
}
temp <- c(temp, rep(length(eventslocs),length(ids.bystudy[[u]])-length(temp)))
names(temp) <- ids.bystudy[[u]]
temp
})
names(rs) <- studies
beta2 <- coef(surv.start)
ll <- surv.start$loglik - sum(as.numeric(do.call(c, cen.bystudy)))
list(beta2 = beta2, haz = haz, rs = rs, sf = sf.bystudy, nev = nev.bystudy,
log.like.surv = ll, modelfit = surv.start)
}
}
if(strat){
survests <- survst(survdat = survdat,
surv.formula = surv.formula,
survdat2 = survdat2,
strat = strat,
study.name = study.name)
}else{
survests <- survst(survdat = survdat,
surv.formula = surv.formula,
survdat2 = survdat2,
strat = strat,
study.name = study.name)
}
survdat2 <- survdat2[order(survdat2[, 2]), ]
n <- length(survdat[, 2])
s <- survdat[, 2]
cen <- survdat[, 3]
study<-survdat[, 4]
ids.surv<-survdat[, 1]
p2 <- dim(survdat)[2] - 4
studies<-unique(study)
numstudies<-length(studies)
strat == FALSE
ids.bystudy <- lapply(1:numstudies, function(u) {
ids.surv[which(survdat[, 4] == studies[u])]
})
names(ids.bystudy) <- studies
n.bystudy <- unlist(lapply(1:numstudies, function(u) {
length(ids.bystudy[[u]])
}))
cen.bystudy <- lapply(1:numstudies, function(u) {
cen[which(ids.surv%in%ids.bystudy[[u]])]
})
names(cen.bystudy) <- studies
s.bystudy <- lapply(1:numstudies, function(u) {
s[which(ids.surv%in%ids.bystudy[[u]])]
})
names(s.bystudy) <- studies
surv.formula.strat <- as.character(surv.formula)
surv.formula.strat[3] <- paste(surv.formula.strat[3],
"+strata(", study.name, ")",
sep = "", collapse = "")
surv.formula.strat <- as.formula(paste(surv.formula.strat[2],
surv.formula.strat[1],
surv.formula.strat[3], sep = ""))
surv.start <- coxph(surv.formula.strat, data = survdat, x = TRUE)
surv.start.f <- survfit(surv.start)
data <- data.frame(cbind(basehaz(surv.start),
surv.start.f$n.event, surv.start.f$n.risk))
data[, 3]
library(joineRmeta)
system.time(onestagefit3<-jointmeta1(data = jointdat, long.formula = Y ~ 1 + time + treat*study,
long.rand.ind = c("int", "time"),
sharingstrct = "randprop",
surv.formula = Surv(survtime, cens) ~ treat,
study.name = "study", strat = T)) #42.95
library(joineRmeta)
?onestage2
?onestage4
library(joineRmeta)
?confint
?confint.jointmeta1SE
library(joineRmeta)
?confint
?confint.jointmeta1SE
class(onestage0$onestagefit0SE)
?simdat
str(simdat)
?simdat2
?simdat3
?joineRfits
class(joineRfits$joineRfit1SE)
class(joineRfits$joineRfit1)
?joineRfits2
?JMfits
?JMfits2
?onestage0
class(onestage0)
?onestage1
?onestage2
?onestage3
?onestage4
library(joineRmeta)
?joineRmeta:::EMalgRandprop
library(joineRmeta)
?joineRmeta:::EMalgRandprop
?jointmeta1.object
?joineRmeta:::EMalgRandprop
library(joineRmeta)
library(joineR)
?joint
library(joineRmeta)
?fixef.jointmeta1
library(joineRmeta)
?fixef.jointmeta1
?formula.jointmeta1
library(joineRmeta)
?formula.jointmeta1
?joineRmeta:::jlike
?jointmeta1.object
onestagefit4<-onestage4$onestagefit4
str(onestagefit4)
library(joineRmeta)
?jointmeta1.object
library(joineRmeta)
?jointmeta1.object
str(onestagefit4)
?jointmeta1
library(joineRmeta)
?jointmeta2
joineRmodels <- joineRfits[c("joineRfit1", "joineRfit2", "joineRfit3", "joineRfit4", "joineRfit5")]
joineRmodelsSE <- joineRfits[c("joineRfit1SE", "joineRfit2SE", "joineRfit3SE", "joineRfit4SE", "joineRfit5SE")]
MAjoineRfits<-jointmeta2(fits = joineRmodels, SE = joineRmodelsSE, longpar = c("time", "treat1"), survpar = "treat1", assoc = TRUE, studynames = c("Study 1","Study 2", "Study 3", "Study 4", "Study 5"))
MAjoineRfits
str(MAjoineRfits)
names(MAjoineRfits)
names(MAjoineRfits$longMA)
forest(MAjoineRfits$longMA$treat1)
library(meta)
library(meta)
forest(MAjoineRfits$longMA$treat1)
longdat.1<-merge(jointdat.1$longitudinal,jointdat.1$baseline,by="id")
for(i in 1:length(unique(jointdat$baseline$study))){
idstemp<-jointdat$baseline$id[which(jointdat$baseline$study %in% unique(jointdat$baseline$study)[i])]
temp<-subset(jointdat,idstemp)
class(temp)<-"jointdata"
assign(paste("jointdat",unique(jointdat$baseline$study)[i],sep="."),temp)
}
jointdat<-tojointdata(longitudinal = simdat$longitudinal,
survival = simdat$survival, id = "id", longoutcome = "Y",
timevarying = c("time","ltime"), survtime = "survtime", cens = "cens",
time = "time")
jointdat$baseline$study <- as.factor(jointdat$baseline$study)
jointdat$baseline$treat <- as.factor(jointdat$baseline$treat)
for(i in 1:length(unique(jointdat$baseline$study))){
idstemp<-jointdat$baseline$id[which(jointdat$baseline$study %in% unique(jointdat$baseline$study)[i])]
temp<-subset(jointdat,idstemp)
class(temp)<-"jointdata"
assign(paste("jointdat",unique(jointdat$baseline$study)[i],sep="."),temp)
}
longdat.1<-merge(jointdat.1$longitudinal,jointdat.1$baseline,by="id")
longdat.2<-merge(jointdat.2$longitudinal,jointdat.2$baseline,by="id")
longdat.3<-merge(jointdat.3$longitudinal,jointdat.3$baseline,by="id")
longdat.4<-merge(jointdat.4$longitudinal,jointdat.4$baseline,by="id")
longdat.5<-merge(jointdat.5$longitudinal,jointdat.5$baseline,by="id")
survdat.1<-merge(jointdat.1$survival,jointdat.1$baseline,by="id")
survdat.2<-merge(jointdat.2$survival,jointdat.2$baseline,by="id")
survdat.3<-merge(jointdat.3$survival,jointdat.3$baseline,by="id")
survdat.4<-merge(jointdat.4$survival,jointdat.4$baseline,by="id")
survdat.5<-merge(jointdat.5$survival,jointdat.5$baseline,by="id")
lmefit1<-lme(fixed = Y ~ 1 + time + treat, data = longdat.1, random = ~ 1 + time|id, control=lmeControl(opt = "optim"))
survfit1<-coxph(Surv(survtime, cens) ~ treat, data = survdat.1, x = TRUE)
library(nlme)
lmefit1<-lme(fixed = Y ~ 1 + time + treat, data = longdat.1, random = ~ 1 + time|id, control=lmeControl(opt = "optim"))
survfit1<-coxph(Surv(survtime, cens) ~ treat, data = survdat.1, x = TRUE)
JMfit1<-jointModel(lmeObject = lmefit1, survObject = survfit1, timeVar = "time",
parameterization = "value", method = "spline-PH-aGH")
library(JM)
library("nlme", "JM")
JMfit1<-jointModel(lmeObject = lmefit1, survObject = survfit1, timeVar = "time",
parameterization = "value", method = "spline-PH-aGH")
library(joineRmeta)
?jointmeta2
?jointmetaplot
library(joineRmeta)
?jointmetaplotall
library(joineRmeta)
?jointmetaplotall
?jointmeta1SE.object
library(joineRmeta)
?jointmeta1SE.object
?jointmetaSE
onestagefit2<-jointmeta1(data = jointdat, long.formula = Y ~ 1 + time +
treat*study, long.rand.ind = c("int", "time"),
sharingstrct = "randprop",
surv.formula = Surv(survtime, cens) ~ treat*study, study.name = "study",
strat = T)
onestagefit2<-jointmeta1(data = jointdat, long.formula = Y ~ 1 + time +
treat*study, long.rand.ind = c("int", "time"),
sharingstrct = "randprop",
surv.formula = Surv(survtime, cens) ~ treat*study, study.name = "study",
strat = F)
fixef(onestagefit2,type="Longitudinal")
onestagefitSE <- jointmetaSE(fitted = onestagefit, n.boot = 125,
overalleffects = overalleffects = list(long = list(c("treat1", "treat1:study2"),
c("treat1", "treat1:study3"),
c("treat1", "treat1:study4"),
c("treat1", "treat1:study5")),
surv = list(c("treat1", "treat1:study2"),
c("treat1", "treat1:study3"),
c("treat1", "treat1:study4"),
c("treat1", "treat1:study5"))))
onestagefit2SE <- jointmetaSE(fitted = onestagefit2, n.boot = 125,
overalleffects = list(long = list(c("treat1", "treat1:study2"),
c("treat1", "treat1:study3"),
c("treat1", "treat1:study4"),
c("treat1", "treat1:study5")),
surv = list(c("treat1", "treat1:study2"),
c("treat1", "treat1:study3"),
c("treat1", "treat1:study4"),
c("treat1", "treat1:study5"))))
onestagefit2SE
library(joineRmeta)
?jointmeta1SE.object
?jointmeta1SE
?jointmetaSE
?longst
library(joineRmeta)
?longst
library(joineRmeta)
?longst
?print.jointmeta1
print(onestagefit)
print(onestagefit2)
library(joineRmeta)
library(joineRmeta)
?print.jointmetaSE
?print.jointmeta1SE
?print.jointmeta1SE
library(joineRmeta)
?print.jointmeta1SE
?print.jointmeta1SE
library(joineRmeta)
?rancov
rancov(onestagefit, type = "individual")
rancov(onestagefit2, type = "individual")
rancov(onestagefit2, type = "study")
library(joineRmeta)
?rancov
ranef(onestagefit2,"individual")
ranef(onestagefit2,"study")
onestagefit<-jointmeta1(data = jointdat, long.formula = Y ~ 1 + time +
treat + study, long.rand.ind = c("int", "time"),
long.rand.stud = c("treat"), sharingstrct = "randprop",
surv.formula = Surv(survtime, cens) ~ treat, study.name = "study",
strat = T)
ranef(onestagefit, type = "individual")
ranef(onestagefit, type = "study")
rancov(onestagefit, type = "study")
library(joineRmeta)
?ranef.jointModel
?ranef.jointmeta1
?removeafter
str(simdat3)
library(joineRmeta)
?removeafter
?sep
library(joineRmeta)
?sep
?joineRmeta:::simdat1randlevel
?simjointmeta
library(joineRmeta)
?joineRmeta:::simdat1randlevel
?joineRmeta:::simdat2randlevel2
?joineRmeta:::simdat2randlevels
library(joineRmeta)
?joineRmeta:::simdat2randlevels
?joineRmeta:::sortDat
?summary.jointmeta1
summary(onestagefit, variance = TRUE)
summary(onestagefit, variance = FALSE)
library(joineRmeta)
?summary.jointmeta1
?joineRmeta:::survst
?joineRmeta:::sortDat
?joineRmeta:::longst
library(joineRmeta)
?joineRmeta:::survst
library(joineRmeta)
library(joineRmeta)
?tojointdata
library(joineRmeta)
?tojointdata
library(joineRmeta)
?tojointdata
jointdat<-tojointdata(longitudinal = simdat$longitudinal,
survival = simdat$survival, id = "id", longoutcome = "Y",
timevarying = c("time","ltime"), survtime = "survtime", cens = "cens",
time = "time")
jointdat$baseline$study <- as.factor(jointdat$baseline$study)
jointdat$baseline$treat <- as.factor(jointdat$baseline$treat)
onestagefit<-jointmeta1(data = jointdat, long.formula = Y ~ 1 + time +
treat + study, long.rand.ind = c("int", "time"),
long.rand.stud = c("treat"), sharingstrct = "randprop",
surv.formula = Surv(survtime, cens) ~ treat, study.name = "study",
strat = T)
onestagefitSE <- jointmetaSE(fitted = onestagefit, n.boot = 110)
vcov(onestagefitSE)
library(joineRmeta)
library(joineRmeta)
